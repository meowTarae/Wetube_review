import { compare } from "bcrypt"

Schema에 unique: true를 넣어서 db에 중복된 값이 들어가지 않게끔

객체(Object)는 소프트웨어 세계에 구현할 대상이고, 
이를 구현하기 위한 설계도가 클래스(Class)이며, 
이 설계도에 따라 소프트웨어 세계에 구현된 실체가 인스턴스(Instance)이다. 

1. hash

    Determinic func (결정적 함수)
    또한, 단방향 함수이다.

    npm i bcrypto
    // 참고: npmjs.com/package/bcrypt
    
    bcrypt.hash(password, saltRounds);
                        // 몇 번 해싱할지

2. $or

    ex)
        const exists = await User.exists( { $or: [{ username }, { email }] )
        
        유용하게 사용 될 경우가 많아 보이니 익혀두자.

    // 참고 : https://www.mongodb.com/docs/manual/reference/operator/query/or/#mongodb-query-op.-or

3. status code
    // 참고: https://ko.wikipedia.org/wiki/HTTP_%EC%83%81%ED%83%9C_%EC%BD%94%EB%93%9C
    // 참고: https://expressjs.com/ko/api.html#res.status
    
    404: 요청한 페이지가 없을 때
    302: ..
    200: 서버가 요청을 제대로 처리했다.
    505: ..
    etc..

    status code 사용법
        res.render("/~~") 에서
        res.status(400).render("/~~") 처럼 끼워넣어주면 됨.
        

4. 
    유저가 로그인 할 때
    입력한 password 값을 해싱 후, db 값과 비교하면 되긴 함.

    bcrypt는 위를 지원해줌 compare() 로.
        const match = 
            await bcrypt.compare(a, b);
                a: user password
                b: DB password
    
    compare() 사용 시, saltRounds 값을 넣을 필요 X.
    왜냐면 해쉬된 값 맨 앞에보면 saltRounds 값이 있음 ㅋㅋ


5.
    세션 : 브라우저와 백엔드 사이의 memory, history

    1. 브라우저가 서버에 접근
    2. 서버는 브라우저에게 Cookie를 준다.
    3. 브라우저가 다시 서버에 접근할 시 2. 에서 받은 Cookie를 준다.
    4. 서버는 Cookie를 통해 브라우저를 구분.


    세션 : 서버측에서 제공해주는 데이터. 
    쿠키 : 클라이언트측에서 저장하고 사용하는 데이터


    db에 연동되지 않은 세션은 메모리에 저장됨
        >> C c로 서버 닫으면 다 날아감
    

    login 할 때, 
        req.session.loggedIn = true;
        req.session.user = ~~~;
    걸어줄 수 있음.


6. local

    express 와 pug 는 같은 local을 공유 
        ( pug를 express의 view engine으로 설정 했기때문)
    때문에 pug template에서 res.local 사용 가능

    res.local.sexy = "blabla"
    res.local.loggedIn = Boolean(req.session.loggedIn);

    원하는 변수명으로 설정 후 전역적으로 사용 가능.


7. 
    session data는 Server에 저장되며,
    session id만 Cookie 안에 저장됨.

    기본 저장 서버, default session store는 Memory store인데, 
    휘발성이므로 실사용 용도는 아님

    해서 session을 DB에 저장해야 데이터가 날아가지 않음.    
    그래서 우리는 npm i connect-mongo, mongo store 를 사용할거다.


8. 
    * resave : 모든 request마다 세션의 변경사항이 있든 없든 세션을 다시 저장한다.    
        - true:
            + 스토어에서 세션 만료일자를 업데이트 해주는 기능이 따로 없으면 true로 설정하여 
              매 request마다 세션을 업데이트 해주게 한다.
        - false:
            + 변경사항이 없음에도 세션을 저장하면 비효율적이므로 동작 효율을 높이기 위해 사용한다.
            + 각각 다른 변경사항을 요구하는 두 가지 request를 동시에 처리할때 
              세션을 저장하는 과정에서 충돌이 발생할 수 있는데 이를 방지하기위해 사용한다.

    * saveUninitialized : uninitialized 상태인 세션을 저장한다. 
      여기서 uninitialized 상태인 세션이란 request 때 생성된 이후로 아무런 작업이 가해지지않는 초기상태의 세션을 말한다.
        - true:
            + 클라이언트들이 서버에 방문한 총 횟수를 알고자 할때 사용한다.
        - false:
            + uninitialized 상태인 세션을 강제로 저장하면 내용도 없는 빈 세션이 스토리지에 계속 쌓일수 있다. 
              이를 방지, 저장공간을 아끼기 위해 사용한다.


9. 
    .env 파일에 중요한 환경변수들 (mongodb url, secret, etc...) 을 넣고
    npm i dotenv 후 require("dotenv").config()를 파일 상단에 작성해주면된다.
    
    다만, import가 아닌 require로 수입하는 방법은, 환경변수를 사용할 모든 파일에 작성해야 한다.
    때문에 import "dotenv/config"  처럼 import 방식으로 수입해준다.

    추가로, scripts 시 가장 먼저 실행되는 파일인 init.js 맨 윗줄에 해준다.
    그러면 .env 파일에 있는 변수들을 process.env.변수명 으로 모든 파일에서 사용 가능하다.



10. GitHub Login

    ! 순서
        1. Users are redirected to request their GitHub identity

        2. Users are redirected back to your site by GitHub

        3. Your app accesses the API with the user,s access token

        https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps


    참고)
    1) url 분할 
        const config = {
          client_id: "9fac726866be2ff14f36",
          allow_signup: false,
          scope: "read:user user:email",
        };
        const params = new URLSearchParams(config).toString();

        URLSearchParams()을 통해 client_id=9fac726866be2ff14f36&allow_signup=false를 만든다.

    2) fetch()
        1. fetch('url')로 다른 서버를 통해 데이터를 가져올 수있다.
        하지만, res.body 에 담겨있는 날것의 url로는 제대로 된 객체를 받아올 수 없다.

        2.때문에 중간에 .json 함수가 response의 스트림을 가져와 끝까지 읽고, res.body의 텍스트를 promise의 형태로 반환한다.

        3. 다른 서버에서 데이터를 object 형식으로 받아온다
