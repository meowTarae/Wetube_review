1. PUG
    템플릿 엔진.
    템플릿을 이용하여 뷰 만드는걸 도움

    사용하려면 Express에게 html 헬퍼로 pug를 사용한다고 알려줘야 함.
        app.set("view engine", "pug");
        app.set("views", process.cwd() + "/src/views");
            ; pug를 읽을 파일 위치를 지정

    또한, views 라는 폴더 내의 파일을 인식하기에
    별도로 views 라는 폴더를 만든 후 거기에 파일을 넣어야됨.

    이후 컨트롤러에서 res.render("home");
    을 해서 home.pug 파일을 렌더링 받을 수 있음

    여기서 렌더링은 html로 입력받아 해석해서 표준 출력 장치(모니터)로 출력하는 것이다.

2. inheritence와 extends
    상속 할 기본 템플릿을 만들어서, 다른 pug 파일에 넘길 수 있음.
    layout 파일에는 상속할 코드를 작성하고
    상속받는 파일에서 추가할 내용은 block 으로 지정해둔다.
        block serachDiv

    상속받을 파일은 exntends layout (혹은 layout.pug)
    block 내용을 채워넣으면 됨.
        block serachDiv
            <h4>hello!/h4>

3. conditional
    like if, else if...
    이걸 template에 사용할 것임.

    참고 )
        1. h1 #{ pageTitle }의 페이지
        2. h1=pageTitle
            둘 다 변수 값을 나타내줌.
            1번은 다른 텍스트와 혼용해서 쓸 때 사용됨.

        h1 pageTitle
            텍스트로써 사용됨.

    참고 )
        const userInfo = {
            userName: "Tarae",
            age: "9",
        };

        res.render("home", { page: "Home", userInfo: userInfo });
        = res.render("home", { page: "Home", userInfo }) ES6 버젼

    참고 )
        (HTML)
        nav
            ul
                li

        nav는 현 페이지 or 다른 페이지로 이동할 '링크'를 보여주는 구획을 나타낼때 주로 사용.

4. each in
    each potato in videos
                  ; videos는 controller에 실존하는 데이터를 받아야만 함.
        li potato

5. mixin
    smart한 partial이다.
    데이터를 가져올 수 있는 parital

    export )
        mixin videoMixin(info)
            div
                li= info.name
                li= info.upload

    import )
        include는 다른 partials과는 달리, 최상단에 해준다.

        +videoMixin(potato)
        ; 호출은 ' + ' 기호로 한다. funcName(argument) 형태이다.
