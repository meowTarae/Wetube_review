<!-- <!-- 
1.  
    a(href="/edit")     
        => 내 위치와는 관계없이 root/edit 로 이동

    a(href="edit")     
        => 내 위치/edit 로 이동


2. 
    form() - method는 default값이 get이므로,
    db로 값을 보내는 등의 행위시에는 method="POST"를 해주자.
    특정 url로 보내려면 action을 수정해주면 됨.


3. res.redirect()
    브라우저가 자동으로 우리가 준 url 로 이동


4. 
    라우터 파일에서 
    cat.get("/churr", getChurr);
    cat.post("/churr", postChurr);

    (shortCut) => cat.router("/churr").get(getChurr).post(postChurr);


5. 
    HTML에서 
    input(name="title", placeholder="Video Title", value=video.title, required)
        // placeholder는 입력칸이 공백일때 나타나는 텍스트
        // value는 입력칸에 적혀있는 텍스트
    
    라는 입력칸이 있다고 가정.
    이때 해당 입력칸의 이름은 'title' 이다.
    title = `${video.title}`; 이다.


6. form으로부터 정보를 얻을 때
    express를 설정 해줘야함.
    
    server.js에 
    app.use(express.urlencoded({ extended: true })); 를 추가.
    
    => req.body (= html로부터의 input-value) 값을 url에 인코딩해서 가져올 수 있게 해줌.
 

7. mongo DB
    document-based (문서 기반)
    일반적인 db는 sql 베이스, 행 기반이다.

    mongo에서 저장하는 데이터는 JSON-like-document이다.
    따라서 행으로 된 데이터를 저장할 필요 X


8. mongoose
    node.js와 mongoDB를 이어주는 역할
    (우리가 작성한 js를 db로 보내줌)


9. mongoDB 사용 방법

    mongod: MongoDB 시스템의 기본 데몬 프로세서 (서버와 같은 느낌) 
    // mongo demon
    mongo: MongoDB에 대한 쉘 인터페이스 (클라이언트 같은 느낌)

    즉 mongod로 서버를 키고 -> mongo로 인터페이스를 실행하여 mongoDB와 소통한다 -->


10. CRUD
    Create, Read, Update, Delete


11. 
    db에게 데이터 형식을 알려줘야 함.
    타입스크립트처럼, tarae에는 meow가 있고 이건 string이야..
        => schema
            const videoSchema = new mongoose.Schema({
                title: String,
                    // 혹은 title: { type: String },
                date: Date,
                hashtags: [{ type: String }],
            });

                // hashtags 실 데이터
                hastags: [
                    "#hi",
                    "#mongo",
                ]
    
    이를 통해 db는 모델을 구축할 수 있음.
        const movieModel = mongoose.model("Video", videoSchema);
                                        // 모델명, schema 
